Building my environment
=======================

Tools
-----

brew install Caskroom/cask/java
brew install Caskroom/versions/java9-beta
brew install Caskroom/versions/java7
brew install jenv
jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home
jenv add/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home
jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/
jenv versions
jenv global 1.8
brew install maven
java -version; mvn -v
     java version "1.8.0_112"
     Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)


Testing your endopint:
* you can use ARC (Advanced Rest Client) or you can use curl
* curl params of interest:
  * -L follow 3XX response codes, like 302
  * -i --include Include the HTTP-header in output
  * -H "header: value"
  * -X POST|GET (default)|PUT
  * -d "{"key":"value","key":"value"} // --data
  * -k --insecure this allow curl to perform insecure SSL connections
  * curl -i -L http://localhost:8080/

Consume Web Service from web page:

* To consume a web service you cannot use straight HTML, you need JavaScript
* Key to making jquery, ajax call work is `contentype: false`, when using the new FormData API
* Now we have an HTML page that can call a web service and display the result, what's missing is
  HTML markup to create an anchor instead of plain text
*

Coding Style: 

https://google.github.io/styleguide/javaguide.html
curl https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml > intellij-java-google-style.xml

Logging:

trying to have different log configurations for dev, test and prod. This post is a great start:
http://stackoverflow.com/questions/29429073/spring-boot-logback-and-logging-config-property

Note: spring wants you to use `logback-spring.xml` so that Spring can intercept the log file,
that's a great idea in many cases. However, if you want to write FAST POJO based tests and  you
are mocking many of your dependencies for a unit tests, you will also need the non-spring version
 of these files, why have both? Just use `logback.xml` and skip the spring version (if you don't
 need Spring to provide additional help with logging). Here is a good ref for yaml configuration
 in spring: https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html
 When using `yaml` files, spacing is everything. This failed (note how the `-` lines up with
 JAVA_OPTS, that's not okay):

  JAVA_OPTS: >-
  -Dspring.profiles.active=prod

This worked:
  JAVA_OPTS: >-
    -Dspring.profiles.active=prod


Build Status
Adding a build status badge to my README.md page, here's hte MD for the badge
[![Build Status](https://travis-ci.org/macInfinity/calendar-monster.svg?branch=master)](https://travis-ci.org/macInfinity/calendar-monster)
Page from TravisCI that explained it: https://docs.travis-ci.com/user/status-images/

Build number
Adding `sha1` to the webpage so I know what version is out there. Using this post to get the
build number: https://blog.jayway.com/2012/04/07/continuous-deployment-versioning-and-git/

App Config, yaml v. properties
Since I like to use the same file for configuration, I tend to use the approach that has the
least draw backs, in the case of `yaml` flies, Spring provides some great support BUT you cannot
use a `yaml` file for a `@PropertySource` annotation. If that's a requirement, then I'd suggest
you only use `properties` files.
https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-yaml-shortcomings
Working through the filtering resources, you need to use `@@` instead of `${}`, here's a SO on it:
http://stackoverflow.com/questions/36501017/maven-resource-filtering-not-working-because-of-spring-boot-dependency
here's the actual code:
https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/spring-boot-starter-parent/pom.xml#L21
So to get this to work, spring boot actually calls out `application*.yml` so if your file ends
with `.yaml` you are out of luck. Okay, fixed and now my yaml file is filtered. Next issue is
IntelliJ not filtering my resources correctly. I'm guessing it's because the buildnumber plugin
isn't being run, but I'd like it to be run too....
This post helped: https://intellij-support.jetbrains.com/hc/en-us/community/posts/206883505-Intellij-make-build-maven-resources-filtering
Looks like you need to tweak the "Run Configuration" in IntelliJ, I don't like this as it
requires special setup for your app but it's what I've got for now. That did it, it all works as
expected now.

Sha1
Trying to create a simple `get` endpoint to return the short SHA1 for the project. Trying to
return a very basic json model, using some examples to get it working. To get the correct syntax
for the ImmutableMap Builder, check this out:
http://stackoverflow.com/questions/7345241/builder-for-hashmap
To get the correct JSON result, we just need to make a map and add that to the ResponseEntity.ok
() method, Spring turns the map into a JSON response!!!

Stick footer
To get a banner at the bottom of the page, we need something called a stick footer, here is a SO
post about it: http://stackoverflow.com/questions/21324395/bootstrap-3-flush-footer-to-bottom-not-fixed
The post suggests that we look at Bootstrap 3 for the solution, http://getbootstrap.com/examples/sticky-footer-navbar/
it turns out that T had thrown in a `body > div {max-width: 6.5in;}` that put the entire body in
a 6.5" space, so I removed the `body > div` and replaced it with a CSS class, used that class in
the top level `div` so most of the document is in the middle. Then I had to refresh my memory on
CSS selectors, so here's the ref: http://www.w3schools.com/cssref/css_selectors.asp. With the CSS
 setup, I needed to figure out the JavaScript, I could have used Maven to filter the value into
 the index.html page BUT I didn't want to expose this or future pages to Maven filtering so ajax
 it would be. This page was very helpful: https://spring.io/guides/gs/consuming-rest-jquery/ as
 was this page: http://stackoverflow.com/questions/23059741/jquery-ajax-json-result-to-text-input-value
What I'm not comfortable with is this line: `$('.sha1').append(data.sha1)` I get we need to
update the data in the DOM with this value, but I'm not sure what the other appropriate `append`
methods are OR how to find all the appropriate methods.

Deploy to GAE
Updating the project to automatically push to GAE when code is merged to master, starting with
this post: https://docs.travis-ci.com/user/deployment/google-app-engine/
So you need to download your `secret` key from GAE, from there you need to encrypt it with
`travis`, I put the file in one location and then went to my project to run the encrypt command:
travis encrypt-file ~/Downloads/calendar-monster-secret.json --add
this added this to .travis.yml
before_install:
- openssl aes-256-cbc -K $encrypted_05278cc033a1_key -iv $encrypted_05278cc033a1_iv
  -in calendar-monster-secret.json.enc -out ~\/Downloads/calendar-monster-secret.json
  -d
Here is my `.travis.yml` file at this point:
language: java
jdk:
- oraclejdk8
sudo: false
script: mvn clean verify
deploy:
  provider: gae
  keyfile: calendar-monster-secret.json.enc
  project: calendar-monster
before_install:
- openssl aes-256-cbc -K $encrypted_05278cc033a1_key -iv $encrypted_05278cc033a1_iv
  -in calendar-monster-secret.json.enc -out ~\/Downloads/calendar-monster-secret.json
  -d
now there is no example showing what goes with `keyfile:` so I'm assuming I got it right...
So as I expected, this line was wrong: `-out ~\/Downloads/calendar-monster-secret.json` I'm not
sure why that was added to the yml file since you should not commit that file to your repo. Back
to the docs. I just needed to change the path after `-out`, DOH!
This example is key, the Travis CI docs mentioned the exmaple project, I just missed it:
https://github.com/GoogleCloudPlatform/continuous-deployment-demo/blob/appengine_travis_deploy/.travis.yml
So Travis CI uses it's own approach to deploying to GAE and the GAE maven plugin which will find
the `app.yaml` file under src/main/resources/app.yaml is not found by Travis CI, so now I've got
two version of the file, just for now, until I get it all working together OR travis CI using
Maven for the deploy (which I'm guessing will not be possible).
I needed to enable the admin API, did that and got further but still not working.
The `Google Cloud Storage JSON API` was already active in my account, but I did need to turn on
the `Admin API` so that's good. From this bug report: https://github.com/travis-ci/travis-ci/issues/5350
So it looks like we can just create our own GAE install in Travis-CI, for some reason I was
thinking we didn't need to do this, anyway, I think this file will be helpful to get things
working: https://github.com/GoogleCloudPlatform/continuous-deployment-demo/blob/master/.travis.yml
After looking at the GAE Travis example I'm going to try installing the `java` component in
Travis.
I'm giving up on Travis CI, moving on to CircleCI. So I'm giving up on tihs today, for some
reason CircleCI and Travis are making this difficult, interesting so see how each service handles
 the Google authentication keys. Travis using their own encryption tool and CircleCI using a
 base64 encoded string and an environment variable.

Jacked encoding, Issue #4
First good hit tonight on the "black diamond with a question mark" in my text:
http://stackoverflow.com/questions/5462693/java-removing-strange-characters-from-a-stringz
The solution is using the java.text.Normalizer class to remove the bad characters, turns out other
sites do this too, I just didnt' realize. This works great on my mac but sadly I need to use the
Normalizer to get this working cross-platform. I blame Numbers for jacking this up.



Links:
* https://github.com/HPI-Information-Systems/Metanome/wiki/Installing-the-google-styleguide-settings-in-intellij-and-eclipse
* https://www.codeproject.com/Articles/14610/Calling-Web-Services-from-HTML-Pages-using-JavaScr
// crappy post
* http://stackoverflow.com/questions/26330910/javascript-learning-how-to-consume-restful-apis
* http://stackoverflow.com/questions/5392344/sending-multipart-formdata-with-jquery-ajax
* http://stackoverflow.com/questions/1557602/jquery-and-ajax-response-header
* http://stackoverflow.com/questions/18568736/how-to-hide-element-using-twitter-bootstrap-3-and-show-it-using-jquery
* http://stackoverflow.com/questions/12147818/twitter-bootstrap-reset-button
* https://docs.travis-ci.com/user/travis-lint/
* https://blog.travis-ci.com/2013-01-14-new-client/
* http://stackoverflow.com/questions/33267878/example-of-travis-ci-yml-file-for-java
* http://stackoverflow.com/questions/29429073/spring-boot-logback-and-logging-config-property
* https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html
* https://blog.jayway.com/2012/04/07/continuous-deployment-versioning-and-git/
* https://intellij-support.jetbrains.com/hc/en-us/community/posts/206883505-Intellij-make-build-maven-resources-filtering
* http://www.logicbig.com/tutorials/spring-framework/spring-web-mvc/request-response-entity/
* http://stackoverflow.com/questions/21324395/bootstrap-3-flush-footer-to-bottom-not-fixed
* http://www.w3schools.com/cssref/css_selectors.asp
* https://github.com/travis-ci/travis-ci/issues/5350
* https://github.com/GoogleCloudPlatform/continuous-deployment-demo/blob/master/.travis.yml
* https://github.com/cotsog/travis_ci_prod_trusty/blob/204e3a09d33ed5412ff0f03b2192106dfff00c69/.travis.yml